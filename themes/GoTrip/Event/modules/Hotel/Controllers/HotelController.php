<?php
namespace Modules\Hotel\Controllers;

use Modules\Hotel\Services\HotelService;
use App\Http\Controllers\Controller;
use Modules\Hotel\Models\Hotel;
use Illuminate\Http\Request;
use Modules\Location\Models\Location;
use Modules\Location\Models\LocationCategory;
use Modules\Review\Models\Review;
use Modules\Core\Models\Attributes;
use Illuminate\Support\Facades\Cache;
use DB;
use Auth;

class HotelController extends Controller
{
    protected $hotelClass;
    protected $locationClass;
    /**
     * @var string
     */
    private $locationCategoryClass;

    public function __construct(Hotel $hotel, protected HotelService $hotelService)
    {
        $this->hotelClass = $hotel;
        $this->locationClass = Location::class;
        $this->locationCategoryClass = LocationCategory::class;
    }
    public function callAction($method, $parameters)
    {
        if(!Hotel::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $layout = setting_item("hotel_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        $is_ajax = $request->query('_ajax');
        $for_map = $request->query('_map',$layout === 'map');

        if(!empty($request->query('limit'))){
            $limit = $request->query('limit');
        }else{
            $limit = !empty(setting_item("hotel_page_limit_item"))? setting_item("hotel_page_limit_item") : 9;
        }
        // $query = $this->hotelClass->search($request->input());
        $query = $this->hotelService->searchHotel($request->input());
        $list  = $this->hotelService->paginate($request, $query, $limit);
        $markers = [];
        if ($for_map and !empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id"      => $row['id'],
                    "title"   => $row['name'],
                    "lat"     => (float)$row['gl']['lt'],
                    "lng"     => (float)$row['gl']['ln'],
                    "gallery" => $row['img'],
                    "infobox" => view('Hotel::frontend.layouts.search.loop-grid', ['row' => $row,'disable_lazyload'=>1,'wrap_class'=>'infobox-item'])->render(),
                    'marker' => get_file_url(setting_item("hotel_icon_marker_map"),'full') ?? url('images/icons/png/pin.png'),
                ];
            }
        }
        $limit_location = 15;
        if( empty(setting_item("hotel_location_search_style")) or setting_item("hotel_location_search_style") == "normal" ){
            $limit_location = 1000;
        }
        // dd($list);
        $data = [
            'rows' => $list,
            'layout'=>$layout
        ];
        if ($is_ajax) {
            return $this->sendSuccess([
                "markers" => $markers,
                'fragments'=>[
                    '.ajax-search-result'=>view('Hotel::frontend.ajax.search-result'.($for_map ? '-map' : ''), $data)->render(),
                    '.result-count'=>$list->total() > 1 ? __(":count hotels found",['count'=>$list->total()]) : __(":count hotel found",['count'=>$list->total()]),
                    '.count-string'=> $list->total() ? __("Showing :from - :to of :total Hotels",["from"=>$list->firstItem(),"to"=>$list->lastItem(),"total"=>$list->total()]) : ''
                ]
            ]);
        }

        $data = [
            'rows'               => $list,
            'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translation'])->get()->toTree(),
            'hotel_min_max_price'=> $this->hotelClass::getMinMaxPrice(),
            'markers'            => $markers,
            "blank"              => setting_item('search_open_tab') == "current_tab" ? 0 : 1 ,
            "seo_meta"           => $this->hotelClass::getSeoMetaForPageList()
        ];
        $data['attributes'] = Attributes::where('service', 'hotel')->orderBy("position","desc")->with(['terms'=>function($query){
            $query->withCount('hotel');
        },'translation'])->get();
        $data['layout'] = $layout;

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Hotel::frontend.search-map', $data);
        }
        return view('Hotel::frontend.search', $data);
    }

    public function detail(Request $request, $id)
    {
        $row = $this->hotelService->getHotelDetailFromCache($id);
        if ( empty($row)) {
            return redirect('/');
        }
        $translation = $row;
        $hotel_related = [];
        $location_id = $request->location_id;
        // if (!empty($location_id)) {
        //     $hotel_related = $this->hotelClass::where('location_id', $location_id)->where("status", "publish")->take(4)->whereNotIn('id', [$row->id])->with(['location','translation','hasWishList'])->get();
        // }
        $review_list = '';
        $data = [
            'row'          => $row,
            'translation'       => $translation,
            'hotel_related' => $hotel_related,
            'location_category'=>$this->locationCategoryClass::where("status", "publish")->with('location_category_translations')->get(),
            'booking_data' => $this->hotelService->getBookingData($row),
            'review_list'  => $review_list,
            'seo_meta'  => '',
            'body_class'=>'is_single',
            'breadcrumbs'       => [
                [
                    'name'  => __('Hotel'),
                    'url'  => route('hotel.search'),
                ],
            ],
        ];
        $data['breadcrumbs'] = array_merge($data['breadcrumbs'],$row);
        $data['breadcrumbs'][] = [
            'name'  => $row['name'],
            'class' => 'active'
        ];

        $this->setActiveMenu($row);
        return view('Hotel::frontend.detail', $data);
    }

    public function checkAvailability(){
        $hotel_id = \request('hotel_id');
        $rooms_id = \request('rooms_id');
        if(\request()->input('firstLoad') == "false") {
            $rules = [
                'hotel_id'   => 'required',
                'start_date' => 'required:date_format:Y-m-d',
                'end_date'   => 'required:date_format:Y-m-d',
                'adults'     => 'required',
            ];
            $validator = \Validator::make(request()->all(), $rules);
            if ($validator->fails()) {
                return $this->sendError($validator->errors()->all());
            }

            if(strtotime(\request('end_date')) - strtotime(\request('start_date')) < DAY_IN_SECONDS){
                return $this->sendError(__("Dates are not valid"));
            }
            if(strtotime(\request('end_date')) - strtotime(\request('start_date')) > 30*DAY_IN_SECONDS){
                return $this->sendError(__("Maximum day for booking is 30"));
            }
        }

        // $hotel = $this->hotelService->getHotelDetailFromCache($id);
        // if(empty($hotel_id) or empty($hotel)){
        //     return $this->sendError(__("Hotel not found"));
        // }

        // if(\request()->input('firstLoad') == "false") {
        //     $numberDays = abs(strtotime(\request('end_date')) - strtotime(\request('start_date'))) / 86400;
        //     if(!empty($hotel->min_day_stays) and  $numberDays < $hotel->min_day_stays){
        //         return $this->sendError(__("You must to book a minimum of :number days",['number'=>$hotel->min_day_stays]));
        //     }

        //     if(!empty($hotel->min_day_before_booking)){
        //         $minday_before = strtotime("today +".$hotel->min_day_before_booking." days");
        //         if(  strtotime(\request('start_date')) < $minday_before){
        //             return $this->sendError(__("You must book the service for :number days in advance",["number"=>$hotel->min_day_before_booking]));
        //         }
        //     }
        // }
        $rooms = $this->hotelService->checkRoomAvailability($hotel_id,$rooms_id);
        // dd($rooms);
        
        if(!$rooms)
        {
            return $this->sendError(__("Rooms not found"));
        }

        return $this->sendSuccess([
            'rooms'=>$rooms
        ]);
    }


    public function getHotelRoomsId(Request $request)
{
    $hotelId = $request->get('hotel_id');
    $cachedData = Cache::get('hotel_' . $hotelId);

    if ($cachedData && isset($cachedData['ops'])) {
        return response()->json(['ops' => $cachedData['ops']]);
    } else {
        return response()->json(['ops' => null], 404);
    }
}

    
    public function addToCart(Request $request)
    {
        if (!is_enable_guest_checkout() and !Auth::check()) {
            return $this->sendError(__("You have to login in to do this"))->setStatusCode(401);
        }
        if (auth()->user() && !auth()->user()->hasVerifiedEmail() && setting_item('enable_verify_email_register_user') == 1) {
            return $this->sendError(__("You have to verify email first"), ['url' => url('/email/verify')]);
        }
        $validator = \Validator::make($request->all(), [
            'service_id'   => 'required',
            'service_type' => 'required'
        ]);
        if ($validator->fails()) {
            return $this->sendError('', ['errors' => $validator->errors()]);
        }
        $service_type = $request->input('service_type');
        $service_id = $request->input('service_id');
        $allServices = get_bookable_services();
        if (empty($allServices[$service_type])) {
            return $this->sendError(__('Service type not found'));
        }
        
        $booked = $this->hotelService->addToCart($request);
        return $this->sendSuccess($booked);
    }
}
